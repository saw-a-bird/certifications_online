# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    imgs_directory: '%kernel.project_dir%/public/imgs'
    docs_directory: '%kernel.project_dir%/public/docs'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name

    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # for FileUploader service
    App\Services\FileUploader:
        arguments:
            $imgsDirectory: '%imgs_directory%'

        # for FileUploader service
    App\Services\PDFImporter:
        arguments:
            $docsDirectory: '%docs_directory%'
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EventListener\RedirectUserListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }

    faker.generator:
        class: Faker\Generator

    App\DataFixtures\AppFixtures:
        arguments: ['@security.password_encoder', '@faker.generator']

    app.authentication_success_handler:
            class: App\EventListener\UpdateLastLoginListener
            tags:
                - { name: kernel.event_listener, event: security.interactive_login }
