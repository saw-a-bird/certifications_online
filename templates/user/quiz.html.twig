

{% set page = "login" %}
{% extends "base.html.twig" %}

{% block spreadsheets %}
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{ asset("css/quiz.css") }}">
    <link rel="stylesheet" href="{{ asset("css/shadowForm.css") }}">
    <link rel="stylesheet" href="{{ asset('css/glyphicon.min.css') }}" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

{% endblock %}

{% block title %}Exam {{ exam.code }} - Paper {{ paper_index }}{% endblock %}

{% block body %}

    {% if _return_route == 'user_certif_select' %}
        {% set _back_option = {'id': exam.certification.id} %}
    {% elseif _return_route == 'user_exam_select' %}
        {% set _back_option = {'id': exam.id} %}
    {% elseif _return_route == 'exam_view' %}
        {% set _back_option = {'id': exam.code} %}
    {% elseif _return_route == 'paper_edit' %}
        {% set _back_option = {'id': paper.id} %}
    {% else %}
        {% set _return_route, _back_option = 'index', {'page': 1} %}
    {% endif %}

    {% set _back_path = path(_return_route, _back_option) %}

<!-- start Quiz button -->
    <div id="start_btn" class = "container shadow_container"><button>Start Exam</button></div>
    <!-- Info Box -->
    <div id = "info_box" class="container shadow_container hiddenBox">
        <div class="info-title"><span>Some Rules of this Exam</span></div>
        <div class="info-list">
            <div class="info">1. The exam will last only for <span><span class = "info_seconds">{{ paper.minsUntil }}</span> minutes</span>.</div>
            <div class="info">2. You can't select any option once time goes off.</div>
            <div class="info">3. If you decide to exit the exam before submitting your answers, your data will NOT be saved.</div>
            <div class="info">4. You'll get points on the basis of your correct answers.</div>
            <div class="info">5. No partial correct answers are accepted.</div>
            <div class="info" style = "margin-top: 15px">Lastly, try not to cheat. It's pointless.</div>
        </div>
        <div class="buttons">
            <a href = "{{ _back_path }}" onclick="return confirm('Are you sure you want to exit the exam?.')"><button class="quit">Go back</button></a>
            <button class="continue loading">
            <div class="spinner-border" role="status"></div> Loading</button>
        </div>
    </div>
    <!-- Quiz Box -->
    <div id = "quiz_box" class="container shadow_container hiddenBox">
        <header>
            <h2 class="uk-tab-title uk-link-bright uk-margin-vertical-none"> Exam {{ exam.code }} - Paper {{ paper_index }}</h2>
            <div class = "quiz_header">
                <a href = "{{ _back_path }}"><button class="exit_btn hide">Exit</button></a>

                <div class="timer">
                    <div class="time_left_txt">Time Left</div>
                    <div class="timer_sec"></div>
                </div>
            </div>
            <div class="time_line"></div>
        </header>
        <section>
            <div class="que_text">
                <!-- Here I've inserted question from JavaScript -->
            </div>
            <div class="que_task">
                <!-- Here I've inserted question from JavaScript -->
            </div>
            <div class="option_list">
                <!-- Here I've inserted options from JavaScript -->
            </div>
        </section>
        <!-- footer of Quiz Box -->
        <footer>
            <div class="total_que">
                <!-- Here I've inserted Question Count Number from JavaScript -->
                <span><p id = "current_que"></p> of <p id = "count_que"></p> Questions</span>

            </div>
            <div class = "navigation_quiz_buttons">
                {# <button class="ok_btn show">Ok</button> #}
                <button class="prev_btn">&laquo; Previous</button>
                <button class="next_btn show">Next &raquo;</button>
                <button class="finish_btn">Finish</button>
            </div>
        </footer>
    </div>
    <!-- Result Box -->
    <div id = "result_box" class="container shadow_container hiddenBox">
        <div class="icon">
            <i class="fas fa-crown"></i>
        </div>
        <div class="complete_text">You've completed the exam!</div>
        <div class="score_text uk-text-center">
            <!-- Here I've inserted Score Result from JavaScript -->
        </div>
        <div class="buttons">
            <button class="check-mistakes">Check Mistakes</button>
            <button class="restart">Try Again</button>
            <button class="report_btn"><span class="glyphicon glyphicon-send"></span> Report</button>
            <a href = "{{ _back_path }}"><button class="quit">Exit</button></a>
        </div>
    </div>
    <!-- Inside this JavaScript file I've inserted Questions and Options only -->
    <!-- Inside this JavaScript file I've coded all Quiz Codes -->

    <script>


const info_box = document.getElementById("info_box");
const continue_btn = info_box.querySelector(".buttons .continue");

var questions;
$(document).ready(function() {
    $.post("{{ path('exampaper_get_data') }}", function(data) {
        questions = JSON.parse(JSON.stringify(data));
        document.getElementById("count_que").innerHTML = Object.keys(questions).length;
        continue_btn.classList.remove("loading");
        continue_btn.textContent = "Continue";
    });
});
// creating an array and passing the number, questions, options, and answers

// let questions =  questions|json_encode()|raw ;

let userData = []; // saving user input, counter, counterLine, widthValue, timeValue
let userScore = 0;
let answers = [];

//selecting all required elements
const start_box = document.querySelector("#start_btn");
const start_btn = start_box.querySelector("button");

const quiz_box = document.getElementById("quiz_box");
const que_title = quiz_box.querySelector(".que_text");
const que_task = quiz_box.querySelector(".que_task");
const current_que = document.getElementById("current_que");

const option_list = quiz_box.querySelector(".option_list");
const prev_btn = quiz_box.querySelector("footer .prev_btn");
const next_btn = quiz_box.querySelector("footer .next_btn");
// const ok_btn = quiz_box.querySelector("footer .ok_btn");
const finish_btn = quiz_box.querySelector("footer .finish_btn");
const exit_btn = quiz_box.querySelector(".exit_btn");

const time_line = quiz_box.querySelector("header .time_line");
const timeText = quiz_box.querySelector(".timer .time_left_txt");
const timeCount = quiz_box.querySelector(".timer .timer_sec");

const result_box = document.getElementById("result_box");
const check_mistakes_btn = result_box.querySelector(".buttons .check-mistakes");
const restart_btn = result_box.querySelector(".buttons .restart");
const quit_btn = result_box.querySelector(".buttons .quit");
const report_btn = result_box.querySelector(".report_btn");

// if startQuiz button clicked
start_btn.onclick = ()=>{
    info_box.classList.remove("hiddenBox"); //show info box
    start_box.classList.add("hiddenBox");
}

const widthValue = 720;
const timeValue = '{{ paper.minsUntil*60 }}';

let que_count = 0;
let examFinished = false;

let counter;
let counterLine;

let timeLeft;
let widthLeft;

// if continueQuiz button clicked
continue_btn.onclick = ()=>{
    $.post("{{ path('try_start') }}");

    info_box.classList.add("hiddenBox"); //hide info box
    quiz_box.classList.remove("hiddenBox"); //show quiz box
    showQuestions(0); //calling showQestions function
    startTimer(); //calling startTimer function

    if (que_count == questions.length-1) {
        next_btn.classList.remove("show");
        finish_btn.classList.add("show");
    }
}


report_btn.onclick = ()=>{
    var msg = window.prompt("What's your reason?"); 
    if (msg != "") {
        $(document).ready(function() {
            $.post("{{ path('user_exampaper_report') }}", {report: msg}, function( data ) {
                alert(data); 
            });
        });
    } else {
        alert("This field cannot be empty");
    }
}

// if restartQuiz button clicked
restart_btn.onclick = ()=>{
    window.location.reload();
}

// if Next Que button clicked
next_btn.onclick = ()=>{
    showQuestions(++que_count);

    if (que_count == questions.length-1) {
        next_btn.classList.remove("show");
        finish_btn.classList.add("show");
    }

    if (que_count == 1) {
        prev_btn.classList.add("show");
    }
}

// if Previous Que button clicked
prev_btn.onclick = ()=>{
    showQuestions(--que_count);

    if (que_count+1 == questions.length-1) {
        next_btn.classList.add("show");
        finish_btn.classList.remove("show");
    }

    if (que_count == 0) {
        prev_btn.classList.remove("show");
    }
}

finish_btn.onclick = ()=>{
    if (!examFinished) {
        var confirm = window.confirm('Are you sure you want to submit your answers?');

        if (confirm) {
            calculateScore();
            $(document).ready(function() {
                $.post("{{ path('answers_submit') }}", {score: userScore}, function( data ) {  
                    alert(data); 
                });
            });
            // clearInterval(counterLine);
            clearInterval(counter); // stopping counter
            examFinished = true;

            finish_btn.textContent = "Result";
            showResult(); // showing the results box
        }
    } else {
        showResult(); // showing the results box
    }
}

check_mistakes_btn.onclick = ()=>{
    result_box.classList.add("hiddenBox"); //show result box
    quiz_box.classList.remove("hiddenBox"); //hide quiz box
    exit_btn.classList.remove("hide");
    
    que_count = 0; // starting from the first question

    prev_btn.classList.remove("show");
    if(que_count < questions.length - 1){
        finish_btn.classList.remove("show");
        next_btn.classList.add("fnext_btn");
        next_btn.classList.add("show");
    }

    showQuestions(que_count);
}




// getting questions and options from array
function showQuestions(index){
    // Question Title
    que_title.innerHTML = '<span>'+ (que_count+1) + ' - ' + questions[index].title +'</span>'; 
    // Question Info
    que_task.innerHTML = '<span>' + questions[index].task + '</span>';

    let option_tag = "";
    for(i=0; i < questions[index].options.length; i++){
        option_tag += '<div class="option"><span>'+ questions[index].options[i].proposition +'</span><div class="icons"></div></div>';
    }
    // Question Options
    option_list.innerHTML = option_tag;
    
    // set onclick attribute to all available options
    const option = option_list.querySelectorAll(".option");
    for(i=0; i < option.length; i++){
        option[i].setAttribute("onclick", "optionSelected("+i+", this)");
    }

    // Showing the current question number
    current_que.innerHTML = (que_count+1);

    if (userData[que_count] != null) { // loading saved data
        loadData();
        if (examFinished) { // showing correct answers if finished
            checkAnswers();
        }
    } else {
        userData[que_count] = [];
    }
}

//if user clicked on option
function optionSelected(index, prop) { 
    var wasSelected = prop.classList.contains("selected");

    if (wasSelected) {
        prop.classList.remove("selected");
        prop.lastElementChild.removeChild(prop.lastElementChild.firstElementChild);
    } else {
        prop.classList.add("selected");
        prop.lastElementChild.insertAdjacentHTML("beforeend", selectedIconTag); //adding selected icon to correct selected option
    }

    userData[que_count][index] = !wasSelected
}


// creating the new div tags which for icons
const selectedIconTag = '<div class="icon pencil"><span class="glyphicon glyphicon-pencil"></span></div>';
const tickIconTag = '<div class="icon tick"><span class="glyphicon glyphicon-ok"></span></div>';
const crossIconTag = '<div class="icon cross"><span class="glyphicon glyphicon-remove"></span></i></div>';

function checkAnswers() {
    let current_question = questions[que_count];
    let correctAnswers = questions[que_count].answers; //getting correct answer from array

    const allOptions = option_list.children.length; //getting all option items
    for(i=0; i < allOptions; i++) {
        let option = option_list.children[i];

        if(correctAnswers[i] == true) { //if there is an option which is matched to an array answer
            // TODO: add correct
            option.classList.add("correct"); //adding green color to correct selected option
            option.lastElementChild.insertAdjacentHTML("beforeend", tickIconTag); //adding tick icon to correct selected option
            console.log("Correct Answer");
            
        } else { // wrong answer
            // TODO : remove pencil 

            option.classList.add("incorrect"); //adding red color to correct selected option
            option.lastElementChild.insertAdjacentHTML("beforeend", crossIconTag); //adding cross icon to correct selected option
            console.log("Wrong Answer");
        }

        option.classList.add("disabled"); // disable all options
    }
}

function showResult() {
    quiz_box.classList.add("hiddenBox"); //hide quiz box
    result_box.classList.remove("hiddenBox"); //show result box
    const scoreText = result_box.querySelector(".score_text");

    if(userScore > 0){ // if user scored more than 0
        let reward = "";

        if (userScore == questions.length) {
            reward = "Congratulations &#129395;!";
        }
        scoreText.innerHTML = '<span>' + reward + 'You got <span>'+ userScore +'</span> out of <span>'+ questions.length +'</span> questions right.</span>';
    } else {

        scoreText.innerHTML = '<span>Sorry! You got <span>'+ userScore +'</span> out of <span>'+ questions.length +'</span> questions right. It\'s okay, try harder next time &#128521;.</span>';
    }
}


// // saving user data on Next, maybe using it on previous later.
// function saveData() {
//     let answers = [];

//     const allOptions = option_list.children.length; //getting all option items
//     for(i=0; i < allOptions; i++) {
//         var option = option_list.children[i]; 
//         answers[i] = option.classList.contains("selected");
//     }

//     userData[que_count] = answers;
// }

function loadData() {
    const allOptions = userData[que_count]; //getting all option items
    for (i = 0; i < allOptions.length; i++) {

        var option = option_list.children[i];

        if (allOptions[i] == true) {
            option.classList.add("selected");
            option.lastElementChild.insertAdjacentHTML("beforeend", selectedIconTag);
        }
    }
}

function calculateScore() {
    for(qc = 0; qc < userData.length; qc++) {
        const myAnswers = userData[qc];
        const correctAnswers = questions[qc].answers;
        let win = 0;

        for(i = 0; i < correctAnswers.length; i++) {
            if((correctAnswers[i] == false && !myAnswers[i]) 
            || (correctAnswers[i] == myAnswers[i])) {
                win++;
            }
        }
        
        if (win == correctAnswers.length) {
            userScore++; //upgrading score value with 1
        }
    }
}


function startTimer() {
    // Starting paramters (don't edit)
    time_line.style.width = "0px";
    timeLeft = parseFloat(timeValue);
    timeCount.textContent = timeLeft;
    
    countdownTask();
    counter = setInterval(countdownTask, 1000);

    function countdownTask(){

        timeCount.textContent = Math.floor(timeLeft / 60) + ':' + ('0' + Math.floor(timeLeft % 60)).slice(-2); //add a 0 before time value

        if(timeLeft == 0){ //if timer is finished
            timeText.textContent = "Time Off"; //change the time text to time off
            finish_btn.click();
        }

        time_line.style.width = ((widthValue/timeValue)*(timeValue-(timeLeft--))) + "px"; // startTimerLine alternative
    }
}

// function startTimerLine() {

//     var perMs = Math.floor((timeValue*1000) / widthValue);
//     time_line.style.width = 0;
//     widthLeft = 0;

//     var counterLine = setInterval(timerLine, perMs);

//     function timerLine() {
//         time_line.style.width = (++widthLeft) + "px"; //increasing width of time_line with px by time value

//         if(widthLeft == widthValue){ //if time value is greater than 'widthValue'
//             clearInterval(counterLine); //clear counterLine
//         }

//         console.log(widthLeft);
//     }
// }
    </script>
{% endblock %}